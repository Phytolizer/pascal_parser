/*
  Generated by Make DParser Version 1.30.4ab9d43046e5d22ffb365ec5f5184a7cfee09b30
  Available at https://github.com/jplevyak/dparser
*/


#include "minipascal.hpp"
using namespace boost::variant2;

#include "dparse.h"

D_Reduction d_reduction_0_minipascal = {1, 0, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_1_1_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Program{
            .name = std::move(*get_if<Identifier>(&(D_PN(_children[1], _offset)->user))),
            .body = std::move(*get_if<Block>(&(D_PN(_children[3], _offset)->user))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_1_minipascal = {5, 1, NULL, d_final_reduction_code_1_1_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_2_2_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Block{
            .variable_declaration_part = std::move(*get_if<VariableDeclarationPart>(&(D_PN(_children[0], _offset)->user))),
            .procedure_declaration_part = std::move(*get_if<ProcedureDeclarationPart>(&(D_PN(_children[1], _offset)->user))),
            .statement_part = std::move(*get_if<StatementPart>(&(D_PN(_children[2], _offset)->user))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_2_minipascal = {3, 2, NULL, d_final_reduction_code_2_2_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_3_3_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        if ((_n_children) == -1)
        {
            (D_PN(_ps, _offset)->user) = VariableDeclarationPart{};
        }
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_3_minipascal = {1, 3, NULL, d_final_reduction_code_3_3_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_4_minipascal = {1, 4, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_5_minipascal = {0, 4, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_6_minipascal = {5, 5, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_7_minipascal = {2, 6, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_8_minipascal = {0, 6, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_7_9_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
                get_if<VariableDeclarationPart>(&(D_PN(_ps, _offset)->user))->variable_declarations.emplace_back(std::move(*get_if<VariableDeclaration>(&(D_PN(_children[0], _offset)->user))));
              (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_9_minipascal = {2, 7, NULL, d_final_reduction_code_7_9_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_8_10_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            (D_PN(_ps, _offset)->user) = VariableDeclarationPart{ .variable_declarations = {std::move(*get_if<VariableDeclaration>(&(D_PN(_children[1], _offset)->user)))} };
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_10_minipascal = {0, 8, NULL, d_final_reduction_code_8_10_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_9_11_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = VariableDeclaration{
            .identifiers = {std::move(*get_if<Identifier>(&(D_PN(_children[0], _offset)->user)))},
            .type = std::move(*get_if<Type>(&(D_PN(_children[3], _offset)->user))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_11_minipascal = {4, 9, NULL, d_final_reduction_code_9_11_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_12_minipascal = {2, 10, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_13_minipascal = {0, 10, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_11_14_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            get_if<VariableDeclaration>(&(D_PN(_ps, _offset)->user))->identifiers.emplace_back(std::move(*get_if<Identifier>(&(D_PN(_children[1], _offset)->user))));
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_14_minipascal = {2, 11, NULL, d_final_reduction_code_11_14_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_12_15_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Type{std::move(*get_if<SimpleType>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_15_minipascal = {1, 12, NULL, d_final_reduction_code_12_15_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_12_16_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Type{std::move(*get_if<ArrayType>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_16_minipascal = {1, 12, NULL, d_final_reduction_code_12_16_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_13_17_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = ArrayType{
            .index_range = std::move(*get_if<IndexRange>(&(D_PN(_children[2], _offset)->user))),
            .element_type = std::move(*get_if<SimpleType>(&(D_PN(_children[5], _offset)->user))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_17_minipascal = {6, 13, NULL, d_final_reduction_code_13_17_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_14_18_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = IndexRange{
            .begin = std::move(*get_if<IntegerConstant>(&(D_PN(_children[0], _offset)->user))),
            .end = std::move(*get_if<IntegerConstant>(&(D_PN(_children[2], _offset)->user))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_18_minipascal = {3, 14, NULL, d_final_reduction_code_14_18_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_15_19_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = SimpleType{ .identifier = *get_if<TypeIdentifier>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_19_minipascal = {1, 15, NULL, d_final_reduction_code_15_19_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_16_20_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = TypeIdentifier{ .identifier = *get_if<Identifier>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_20_minipascal = {1, 16, NULL, d_final_reduction_code_16_20_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_21_minipascal = {1, 17, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_22_minipascal = {2, 18, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_23_minipascal = {0, 18, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_19_24_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            if (!get_if<ProcedureDeclarationPart>(&(D_PN(_ps, _offset)->user)))
            {
                (D_PN(_ps, _offset)->user) = ProcedureDeclarationPart{ .procedures = {} };
            }
            get_if<ProcedureDeclarationPart>(&(D_PN(_ps, _offset)->user))->procedures.emplace_back(std::move(*get_if<ProcedureDeclaration>(&(D_PN(_children[0], _offset)->user))));
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_24_minipascal = {2, 19, NULL, d_final_reduction_code_19_24_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_20_25_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = ProcedureDeclaration{ 
            .name = *get_if<Identifier>(&(D_PN(_children[1], _offset)->user)),
            .body = std::make_unique<Block>(std::move(*get_if<Block>(&(D_PN(_children[3], _offset)->user)))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_25_minipascal = {4, 20, NULL, d_final_reduction_code_20_25_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_21_26_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = StatementPart{ .statement = std::move(*get_if<CompoundStatement>(&(D_PN(_children[0], _offset)->user))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_26_minipascal = {1, 21, NULL, d_final_reduction_code_21_26_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_22_27_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = CompoundStatement{};
        get_if<CompoundStatement>(&(D_PN(_ps, _offset)->user))->statements.emplace_back(std::move(*get_if<Statement>(&(D_PN(_children[1], _offset)->user))));
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_27_minipascal = {4, 22, NULL, d_final_reduction_code_22_27_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_28_minipascal = {2, 23, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_29_minipascal = {0, 23, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_24_30_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            get_if<CompoundStatement>(&(D_PN(_ps, _offset)->user))->statements.emplace_back(std::move(*get_if<Statement>(&(D_PN(_children[1], _offset)->user))));
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_30_minipascal = {2, 24, NULL, d_final_reduction_code_24_30_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_25_31_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Statement{std::move(*get_if<SimpleStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_31_minipascal = {1, 25, NULL, d_final_reduction_code_25_31_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_25_32_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Statement{std::move(*get_if<StructuredStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_32_minipascal = {1, 25, NULL, d_final_reduction_code_25_32_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_26_33_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = SimpleStatement{std::move(*get_if<AssignmentStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_33_minipascal = {1, 26, NULL, d_final_reduction_code_26_33_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_26_34_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = SimpleStatement{std::move(*get_if<ProcedureStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_34_minipascal = {1, 26, NULL, d_final_reduction_code_26_34_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_26_35_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = SimpleStatement{std::move(*get_if<ReadStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_35_minipascal = {1, 26, NULL, d_final_reduction_code_26_35_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_26_36_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = SimpleStatement{std::move(*get_if<WriteStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_36_minipascal = {1, 26, NULL, d_final_reduction_code_26_36_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_27_37_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = AssignmentStatement{ 
            .target = std::move(*get_if<Variable>(&(D_PN(_children[0], _offset)->user))),
            .value = std::move(*get_if<Expression>(&(D_PN(_children[2], _offset)->user))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_37_minipascal = {3, 27, NULL, d_final_reduction_code_27_37_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_28_38_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = ProcedureStatement{ .identifier = *get_if<ProcedureIdentifier>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_38_minipascal = {1, 28, NULL, d_final_reduction_code_28_38_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_29_39_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = ProcedureIdentifier{ .identifier = *get_if<Identifier>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_39_minipascal = {1, 29, NULL, d_final_reduction_code_29_39_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_30_40_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = ReadStatement{};
        get_if<ReadStatement>(&(D_PN(_ps, _offset)->user))->input_variables.emplace_back(std::move(*get_if<InputVariable>(&(D_PN(_children[2], _offset)->user))));
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_40_minipascal = {5, 30, NULL, d_final_reduction_code_30_40_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_41_minipascal = {2, 31, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_42_minipascal = {0, 31, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_32_43_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            get_if<ReadStatement>(&(D_PN(_ps, _offset)->user))->input_variables.emplace_back(std::move(*get_if<InputVariable>(&(D_PN(_children[1], _offset)->user))));
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_43_minipascal = {2, 32, NULL, d_final_reduction_code_32_43_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_33_44_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = InputVariable{ .variable = std::move(*get_if<Variable>(&(D_PN(_children[0], _offset)->user))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_44_minipascal = {1, 33, NULL, d_final_reduction_code_33_44_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_34_45_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = WriteStatement{};
        get_if<WriteStatement>(&(D_PN(_ps, _offset)->user))->output_values.emplace_back(std::move(*get_if<OutputValue>(&(D_PN(_children[2], _offset)->user))));
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_45_minipascal = {5, 34, NULL, d_final_reduction_code_34_45_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_46_minipascal = {2, 35, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_47_minipascal = {0, 35, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_36_48_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            get_if<WriteStatement>(&(D_PN(_ps, _offset)->user))->output_values.emplace_back(std::move(*get_if<OutputValue>(&(D_PN(_children[1], _offset)->user))));
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_48_minipascal = {2, 36, NULL, d_final_reduction_code_36_48_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_37_49_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = OutputValue{ .expression = std::move(*get_if<Expression>(&(D_PN(_children[0], _offset)->user))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_49_minipascal = {1, 37, NULL, d_final_reduction_code_37_49_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_38_50_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = StructuredStatement{std::move(*get_if<CompoundStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_50_minipascal = {1, 38, NULL, d_final_reduction_code_38_50_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_38_51_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = StructuredStatement{std::move(*get_if<IfStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_51_minipascal = {1, 38, NULL, d_final_reduction_code_38_51_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_38_52_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = StructuredStatement{std::move(*get_if<WhileStatement>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_52_minipascal = {1, 38, NULL, d_final_reduction_code_38_52_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_39_53_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = IfStatement{
            .condition = std::move(*get_if<Expression>(&(D_PN(_children[1], _offset)->user))),
            .body = std::make_unique<Statement>(std::move(*get_if<Statement>(&(D_PN(_children[3], _offset)->user)))),
            .else_clause = {},
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_53_minipascal = {4, 39, NULL, d_final_reduction_code_39_53_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_39_54_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = IfStatement{
            .condition = std::move(*get_if<Expression>(&(D_PN(_children[1], _offset)->user))),
            .body = std::make_unique<Statement>(std::move(*get_if<Statement>(&(D_PN(_children[3], _offset)->user)))),
            .else_clause = std::make_unique<Statement>(std::move(*get_if<Statement>(&(D_PN(_children[5], _offset)->user)))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_54_minipascal = {6, 39, NULL, d_final_reduction_code_39_54_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_40_55_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = WhileStatement{
            .condition = std::move(*get_if<Expression>(&(D_PN(_children[1], _offset)->user))),
            .body = std::make_unique<Statement>(std::move(*get_if<Statement>(&(D_PN(_children[3], _offset)->user)))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_55_minipascal = {4, 40, NULL, d_final_reduction_code_40_55_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_41_56_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Expression{ .lhs = std::move(*get_if<SimpleExpression>(&(D_PN(_children[0], _offset)->user))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_56_minipascal = {1, 41, NULL, d_final_reduction_code_41_56_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_41_57_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Expression{ 
            .lhs = std::move(*get_if<SimpleExpression>(&(D_PN(_children[0], _offset)->user))), 
            .rhs = Expression::Rhs{
                .op = *get_if<RelationalOperator>(&(D_PN(_children[1], _offset)->user)),
                .simple_expression = std::move(*get_if<SimpleExpression>(&(D_PN(_children[2], _offset)->user))),
            },
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_57_minipascal = {3, 41, NULL, d_final_reduction_code_41_57_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_42_58_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = SimpleExpression{
            .sign = std::move(*get_if<Sign>(&(D_PN(_children[0], _offset)->user))),
            .first = std::move(*get_if<Term>(&(D_PN(_children[1], _offset)->user)))
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_58_minipascal = {3, 42, NULL, d_final_reduction_code_42_58_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_59_minipascal = {2, 43, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_60_minipascal = {0, 43, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_44_61_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            get_if<SimpleExpression>(&(D_PN(_ps, _offset)->user))->rest.emplace_back(SimpleExpression::Rhs{ .op = *get_if<AddingOperator>(&(D_PN(_children[0], _offset)->user)), .term = std::move(*get_if<Term>(&(D_PN(_children[1], _offset)->user))) });
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_61_minipascal = {2, 44, NULL, d_final_reduction_code_44_61_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_45_62_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Term{ .first = std::move(*get_if<Factor>(&(D_PN(_children[0], _offset)->user))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_62_minipascal = {2, 45, NULL, d_final_reduction_code_45_62_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_63_minipascal = {2, 46, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_64_minipascal = {0, 46, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_47_65_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            get_if<Term>(&(D_PN(_ps, _offset)->user))->rest.emplace_back(Term::Rhs{ .op = *get_if<MultiplyingOperator>(&(D_PN(_children[0], _offset)->user)), .factor = std::move(*get_if<Factor>(&(D_PN(_children[1], _offset)->user))) });
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_65_minipascal = {2, 47, NULL, d_final_reduction_code_47_65_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_48_66_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Factor{ .value = std::move(*get_if<Variable>(&(D_PN(_children[0], _offset)->user))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_66_minipascal = {1, 48, NULL, d_final_reduction_code_48_66_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_48_67_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Factor{ .value = std::move(*get_if<Constant>(&(D_PN(_children[0], _offset)->user))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_67_minipascal = {1, 48, NULL, d_final_reduction_code_48_67_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_48_68_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Factor{ .value = std::make_unique<Expression>(std::move(*get_if<Expression>(&(D_PN(_children[1], _offset)->user)))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_68_minipascal = {3, 48, NULL, d_final_reduction_code_48_68_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_48_69_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Factor{ .value = std::make_unique<Factor>(std::move(*get_if<Factor>(&(D_PN(_children[1], _offset)->user)))) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_69_minipascal = {2, 48, NULL, d_final_reduction_code_48_69_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_49_70_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = RelationalOperator::Equals;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_70_minipascal = {1, 49, NULL, d_final_reduction_code_49_70_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_49_71_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = RelationalOperator::LessGreater;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_71_minipascal = {1, 49, NULL, d_final_reduction_code_49_71_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_49_72_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = RelationalOperator::Less;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_72_minipascal = {1, 49, NULL, d_final_reduction_code_49_72_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_49_73_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = RelationalOperator::LessEquals;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_73_minipascal = {1, 49, NULL, d_final_reduction_code_49_73_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_49_74_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = RelationalOperator::GreaterEquals;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_74_minipascal = {1, 49, NULL, d_final_reduction_code_49_74_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_49_75_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = RelationalOperator::Greater;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_75_minipascal = {1, 49, NULL, d_final_reduction_code_49_75_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_50_76_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        if ((_n_children) == 0)
        {
            (D_PN(_ps, _offset)->user) = Sign{ .value = {} };
        }
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_76_minipascal = {1, 50, NULL, d_final_reduction_code_50_76_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_77_minipascal = {1, 51, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_78_minipascal = {0, 51, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_52_79_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            (D_PN(_ps, _offset)->user) = Sign{ .value = Sign::Type::Positive };
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_79_minipascal = {1, 52, NULL, d_final_reduction_code_52_79_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_52_80_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
            (D_PN(_ps, _offset)->user) = Sign{ .value = Sign::Type::Negative };
          (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_80_minipascal = {1, 52, NULL, d_final_reduction_code_52_80_minipascal, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_53_81_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = AddingOperator::Plus;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_81_minipascal = {1, 53, NULL, d_final_reduction_code_53_81_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_53_82_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = AddingOperator::Minus;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_82_minipascal = {1, 53, NULL, d_final_reduction_code_53_82_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_53_83_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = AddingOperator::Or;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_83_minipascal = {1, 53, NULL, d_final_reduction_code_53_83_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_54_84_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = MultiplyingOperator::Star;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_84_minipascal = {1, 54, NULL, d_final_reduction_code_54_84_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_54_85_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = MultiplyingOperator::Div;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_85_minipascal = {1, 54, NULL, d_final_reduction_code_54_85_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_54_86_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = MultiplyingOperator::And;
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_86_minipascal = {1, 54, NULL, d_final_reduction_code_54_86_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_55_87_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Variable{std::move(*get_if<EntireVariable>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_87_minipascal = {1, 55, NULL, d_final_reduction_code_55_87_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_55_88_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Variable{std::move(*get_if<IndexedVariable>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_88_minipascal = {1, 55, NULL, d_final_reduction_code_55_88_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_56_89_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = IndexedVariable{
            .array = *get_if<ArrayVariable>(&(D_PN(_children[0], _offset)->user)),
            .index = std::make_unique<Expression>(std::move(*get_if<Expression>(&(D_PN(_children[2], _offset)->user)))),
        };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_89_minipascal = {4, 56, NULL, d_final_reduction_code_56_89_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_57_90_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = ArrayVariable{ .variable = *get_if<EntireVariable>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_90_minipascal = {1, 57, NULL, d_final_reduction_code_57_90_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_58_91_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = EntireVariable{ .identifier = *get_if<VariableIdentifier>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_91_minipascal = {1, 58, NULL, d_final_reduction_code_58_91_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_59_92_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = VariableIdentifier{ .identifier = *get_if<Identifier>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_92_minipascal = {1, 59, NULL, d_final_reduction_code_59_92_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_60_93_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Constant{std::move(*get_if<IntegerConstant>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_93_minipascal = {1, 60, NULL, d_final_reduction_code_60_93_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_60_94_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Constant{std::move(*get_if<CharacterConstant>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_94_minipascal = {1, 60, NULL, d_final_reduction_code_60_94_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_60_95_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Constant{std::move(*get_if<ConstantIdentifier>(&(D_PN(_children[0], _offset)->user)))};
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_95_minipascal = {1, 60, NULL, d_final_reduction_code_60_95_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_61_96_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = ConstantIdentifier { .identifier = *get_if<Identifier>(&(D_PN(_children[0], _offset)->user)) };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_96_minipascal = {1, 61, NULL, d_final_reduction_code_61_96_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_62_97_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = Identifier { .value = std::string{(*(D_PN(_ps, _offset))).start_loc.s, (*(D_PN(_ps, _offset))).end} };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_97_minipascal = {2, 62, NULL, d_final_reduction_code_62_97_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_98_minipascal = {2, 63, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_99_minipascal = {0, 63, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_100_minipascal = {1, 64, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_65_102_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        int i;
        std::from_chars((*(D_PN(_ps, _offset))).start_loc.s, (*(D_PN(_ps, _offset))).end, i);
        (D_PN(_ps, _offset)->user) = IntegerConstant{ .constant = i };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_102_minipascal = {1, 65, NULL, d_final_reduction_code_65_102_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_103_minipascal = {2, 66, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
D_Reduction d_reduction_104_minipascal = {1, 66, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
int d_final_reduction_code_67_105_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = CharacterConstant{ .constant = (*(D_PN(_ps, _offset))).start_loc.s[1] };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_105_minipascal = {1, 67, NULL, d_final_reduction_code_67_105_minipascal, 0, 0, 0, 0, 0, 0, NULL};
int d_final_reduction_code_67_106_minipascal(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) { 
        (D_PN(_ps, _offset)->user) = CharacterConstant{ .constant = '\'' };
      (void)_children; (void)_n_children;  (void)_parser; return 0;}

D_Reduction d_reduction_106_minipascal = {1, 67, NULL, d_final_reduction_code_67_106_minipascal, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_107_minipascal = {1, 68, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL};
D_Reduction d_reduction_108_minipascal = {1, 69, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_0_minipascal = {70, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_1_minipascal = {71, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_2_minipascal = {72, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_3_minipascal = {73, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_4_minipascal = {74, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_5_minipascal = {75, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_6_minipascal = {76, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_7_minipascal = {77, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_8_minipascal = {78, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_9_minipascal = {79, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_10_minipascal = {80, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_11_minipascal = {81, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_12_minipascal = {82, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_13_minipascal = {83, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_14_minipascal = {84, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_15_minipascal = {85, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_16_minipascal = {86, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_17_minipascal = {87, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_18_minipascal = {88, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_19_minipascal = {89, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_20_minipascal = {90, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_21_minipascal = {91, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_22_minipascal = {92, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_23_minipascal = {93, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_24_minipascal = {94, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_25_minipascal = {95, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_26_minipascal = {96, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_27_minipascal = {97, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_28_minipascal = {98, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_29_minipascal = {99, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_30_minipascal = {100, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_31_minipascal = {101, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_32_minipascal = {102, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_33_minipascal = {103, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_34_minipascal = {104, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_35_minipascal = {105, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_36_minipascal = {106, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_37_minipascal = {107, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_38_minipascal = {108, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_39_minipascal = {109, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_40_minipascal = {110, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_41_minipascal = {111, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_42_minipascal = {112, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_43_minipascal = {113, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_44_minipascal = {114, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_45_minipascal = {115, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_46_minipascal = {116, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_47_minipascal = {117, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_48_minipascal = {118, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_49_minipascal = {119, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_50_minipascal = {120, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_51_minipascal = {121, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_52_minipascal = {122, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_53_minipascal = {123, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_54_minipascal = {124, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_55_minipascal = {125, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_56_minipascal = {126, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_57_minipascal = {127, 0, 0, 0, 0, 0, NULL};

D_Shift * d_accepts_diff_0_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_0_minipascal[] = {
d_accepts_diff_0_0_minipascal
};

unsigned char d_scanner_0_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_accepts_diff_0_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_4_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_6_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_0_7_minipascal[] = {&d_shift_0_minipascal,NULL};

D_Shift * d_accepts_diff_1_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_1_minipascal[] = {
d_accepts_diff_1_0_minipascal
};

unsigned char d_scanner_1_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_1_1_minipascal[] = {&d_shift_56_minipascal,NULL};

D_Shift * d_accepts_diff_4_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_4_minipascal[] = {
d_accepts_diff_4_0_minipascal
};

unsigned char d_scanner_4_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 
};

D_Shift * d_shift_4_1_minipascal[] = {&d_shift_1_minipascal,NULL};

D_Shift * d_accepts_diff_6_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_6_minipascal[] = {
d_accepts_diff_6_0_minipascal
};

unsigned char d_scanner_6_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_6_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_6_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_6_3_minipascal[] = {&d_shift_3_minipascal,NULL};

D_Shift * d_accepts_diff_7_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_7_minipascal[] = {
d_accepts_diff_7_0_minipascal
};

unsigned char d_scanner_7_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_7_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 
0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_7_1_minipascal[] = {&d_shift_57_minipascal,NULL};

D_Shift * d_accepts_diff_9_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_9_minipascal[] = {
d_accepts_diff_9_0_minipascal
};

unsigned char d_scanner_9_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_9_1_minipascal[] = {&d_shift_2_minipascal,NULL};

D_Shift * d_accepts_diff_20_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_20_minipascal[] = {
d_accepts_diff_20_0_minipascal
};

unsigned char d_scanner_20_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_20_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_20_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_20_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_20_4_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_20_5_minipascal[] = {&d_shift_16_minipascal,NULL};

D_Shift * d_accepts_diff_21_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_21_minipascal[] = {
d_accepts_diff_21_0_minipascal
};

unsigned char d_scanner_21_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_21_4_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_21_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_21_6_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_21_7_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_21_8_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_21_9_minipascal[] = {&d_shift_14_minipascal,NULL};

D_Shift * d_accepts_diff_23_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_23_minipascal[] = {
d_accepts_diff_23_0_minipascal
};

unsigned char d_scanner_23_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_23_1_minipascal[] = {&d_shift_6_minipascal,NULL};

D_Shift * d_shift_23_2_minipascal[] = {&d_shift_7_minipascal,NULL};

D_Shift * d_accepts_diff_24_0_minipascal[] = {0};
D_Shift * d_accepts_diff_24_1_minipascal[] = {&d_shift_56_minipascal,0};
D_Shift ** d_accepts_diff_24_minipascal[] = {
d_accepts_diff_24_0_minipascal,
d_accepts_diff_24_1_minipascal
};

unsigned char d_scanner_24_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 2, 3, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 
2, 2, 5, 2, 2, 2, 2, 6, 2, 2, 2, 0, 0, 0, 0, 0, 
0, 2, 3, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 
2, 2, 5, 2, 2, 2, 2, 6, 2, 2, 2, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_accepts_diff_24_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_accepts_diff_24_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_4_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_accepts_diff_24_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_6_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_24_7_minipascal[] = {&d_shift_28_minipascal,NULL};

unsigned char d_scanner_24_8_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_9_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_10_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_11_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_12_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_13_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_14_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_15_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_24_16_minipascal[] = {&d_shift_20_minipascal,NULL};

unsigned char d_scanner_24_17_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_24_18_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_24_20_minipascal[] = {&d_shift_33_minipascal,NULL};

D_Shift * d_shift_24_21_minipascal[] = {&d_shift_24_minipascal,NULL};

D_Shift * d_accepts_diff_32_0_minipascal[] = {0};
D_Shift * d_accepts_diff_32_1_minipascal[] = {&d_shift_56_minipascal,0};
D_Shift ** d_accepts_diff_32_minipascal[] = {
d_accepts_diff_32_0_minipascal,
d_accepts_diff_32_1_minipascal
};

unsigned char d_scanner_32_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 
0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_32_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_accepts_diff_32_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_32_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_32_4_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_32_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_32_6_minipascal[] = {&d_shift_8_minipascal,NULL};

D_Shift * d_accepts_diff_34_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_34_minipascal[] = {
d_accepts_diff_34_0_minipascal
};

unsigned char d_scanner_34_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_34_1_minipascal[] = {&d_shift_21_minipascal,NULL};

D_Shift * d_accepts_diff_36_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_36_minipascal[] = {
d_accepts_diff_36_0_minipascal
};

unsigned char d_scanner_36_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_36_1_minipascal[] = {&d_shift_44_minipascal,NULL};

D_Shift * d_shift_36_2_minipascal[] = {&d_shift_45_minipascal,NULL};

D_Shift * d_accepts_diff_49_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_49_minipascal[] = {
d_accepts_diff_49_0_minipascal
};

unsigned char d_scanner_49_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_49_1_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 
};

D_Shift * d_shift_49_2_minipascal[] = {&d_shift_19_minipascal,NULL};

D_Shift * d_accepts_diff_51_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_51_minipascal[] = {
d_accepts_diff_51_0_minipascal
};

unsigned char d_scanner_51_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_51_1_minipascal[] = {&d_shift_9_minipascal,NULL};

D_Shift * d_accepts_diff_69_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_69_minipascal[] = {
d_accepts_diff_69_0_minipascal
};

unsigned char d_scanner_69_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_69_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_69_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_69_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_69_4_minipascal[] = {&d_shift_29_minipascal,NULL};

D_Shift * d_accepts_diff_70_0_minipascal[] = {0};
D_Shift * d_accepts_diff_70_1_minipascal[] = {&d_shift_40_minipascal,0};
D_Shift * d_accepts_diff_70_2_minipascal[] = {&d_shift_43_minipascal,0};
D_Shift ** d_accepts_diff_70_minipascal[] = {
d_accepts_diff_70_0_minipascal,
d_accepts_diff_70_1_minipascal,
d_accepts_diff_70_2_minipascal
};

unsigned char d_scanner_70_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 
};

unsigned char d_scanner_70_1_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 
};

unsigned char d_accepts_diff_70_1_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
};

D_Shift * d_shift_70_1_minipascal[] = {&d_shift_40_minipascal,NULL};

D_Shift * d_shift_70_2_minipascal[] = {&d_shift_38_minipascal,NULL};

unsigned char d_scanner_70_3_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 
};

unsigned char d_accepts_diff_70_3_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
};

D_Shift * d_shift_70_3_minipascal[] = {&d_shift_43_minipascal,NULL};

D_Shift * d_shift_70_4_minipascal[] = {&d_shift_41_minipascal,NULL};

D_Shift * d_shift_70_5_minipascal[] = {&d_shift_39_minipascal,NULL};

D_Shift * d_shift_70_6_minipascal[] = {&d_shift_42_minipascal,NULL};

D_Shift * d_accepts_diff_71_0_minipascal[] = {0};
D_Shift * d_accepts_diff_71_1_minipascal[] = {&d_shift_56_minipascal,0};
D_Shift ** d_accepts_diff_71_minipascal[] = {
d_accepts_diff_71_0_minipascal,
d_accepts_diff_71_1_minipascal
};

unsigned char d_scanner_71_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_71_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 
0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_71_1_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
};

unsigned char d_scanner_71_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
};

unsigned char d_scanner_71_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_accepts_diff_71_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_71_6_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_71_7_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_71_8_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_71_9_minipascal[] = {&d_shift_54_minipascal,NULL};

unsigned char d_scanner_71_10_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_71_11_minipascal[] = {&d_shift_37_minipascal,NULL};

D_Shift * d_shift_71_12_minipascal[] = {&d_shift_55_minipascal,NULL};

D_Shift * d_accepts_diff_74_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_74_minipascal[] = {
d_accepts_diff_74_0_minipascal
};

unsigned char d_scanner_74_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_74_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_74_2_minipascal[] = {&d_shift_34_minipascal,NULL};

D_Shift * d_accepts_diff_75_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_75_minipascal[] = {
d_accepts_diff_75_0_minipascal
};

unsigned char d_scanner_75_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_75_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_75_4_minipascal[] = {&d_shift_18_minipascal,NULL};

D_Shift * d_accepts_diff_81_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_81_minipascal[] = {
d_accepts_diff_81_0_minipascal
};

D_Shift * d_accepts_diff_114_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_114_minipascal[] = {
d_accepts_diff_114_0_minipascal
};

unsigned char d_scanner_114_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_114_1_minipascal[] = {&d_shift_10_minipascal,NULL};

D_Shift * d_accepts_diff_118_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_118_minipascal[] = {
d_accepts_diff_118_0_minipascal
};

unsigned char d_scanner_118_1_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_118_2_minipascal[] = {&d_shift_12_minipascal,NULL};

D_Shift * d_accepts_diff_119_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_119_minipascal[] = {
d_accepts_diff_119_0_minipascal
};

unsigned char d_scanner_119_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_119_1_minipascal[] = {&d_shift_23_minipascal,NULL};

D_Shift * d_accepts_diff_121_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_121_minipascal[] = {
d_accepts_diff_121_0_minipascal
};

unsigned char d_scanner_121_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_121_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_121_2_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_121_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_121_4_minipascal[] = {&d_shift_32_minipascal,NULL};

D_Shift * d_accepts_diff_123_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_123_minipascal[] = {
d_accepts_diff_123_0_minipascal
};

unsigned char d_scanner_123_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_accepts_diff_125_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_125_minipascal[] = {
d_accepts_diff_125_0_minipascal
};

D_Shift * d_shift_125_4_minipascal[] = {&d_shift_48_minipascal,NULL};

D_Shift * d_accepts_diff_126_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_126_minipascal[] = {
d_accepts_diff_126_0_minipascal
};

unsigned char d_scanner_126_0_0_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_126_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_126_1_minipascal[] = {&d_shift_49_minipascal,NULL};

unsigned char d_scanner_126_3_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_126_5_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_126_6_minipascal[] = {&d_shift_51_minipascal,NULL};

D_Shift * d_shift_126_7_minipascal[] = {&d_shift_50_minipascal,NULL};

D_Shift * d_accepts_diff_131_0_minipascal[] = {0};
D_Shift ** d_accepts_diff_131_minipascal[] = {
d_accepts_diff_131_0_minipascal
};

unsigned char d_scanner_131_0_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_131_1_1_minipascal[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_131_2_minipascal[] = {&d_shift_11_minipascal,NULL};

SB_uint8 d_scanner_0_minipascal[8] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_4_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_5_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_6_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_0_7_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_0_minipascal[8] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_1_minipascal[2] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_1_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_1_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_4_minipascal[2] = {
{NULL, {d_scanner_4_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_4_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_4_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_6_minipascal[4] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_6_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_6_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_6_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_6_3_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_6_minipascal[4] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_7_minipascal[3] = {
{NULL, {d_scanner_7_0_0_minipascal, d_scanner_7_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_7_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_7_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_9_minipascal[2] = {
{NULL, {d_scanner_9_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_9_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_9_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_20_minipascal[6] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_20_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_20_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_20_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_20_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_20_4_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_20_5_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_20_minipascal[6] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_21_minipascal[10] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_0_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_21_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_21_4_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_21_5_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_21_6_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_21_7_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_21_8_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_21_9_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_21_minipascal[10] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_23_minipascal[3] = {
{NULL, {d_scanner_23_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_23_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_23_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_23_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_24_minipascal[22] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_24_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_24_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_24_4_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_24_5_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_6_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_24_7_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_8_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_9_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_10_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_11_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_12_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_13_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_14_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_15_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_24_16_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_17_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_24_18_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_20_5_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_24_20_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_24_21_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_24_minipascal[22] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_24_2_1_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_24_3_1_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_24_2_1_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_24_5_1_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_32_minipascal[7] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_32_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_32_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_32_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_32_4_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_32_5_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_32_6_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_32_minipascal[7] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_32_1_1_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_34_minipascal[2] = {
{NULL, {d_scanner_34_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_34_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_34_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_36_minipascal[3] = {
{NULL, {d_scanner_36_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_36_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_36_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_36_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_49_minipascal[3] = {
{NULL, {d_scanner_49_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_49_1_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_49_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_49_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_51_minipascal[2] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_51_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_51_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_51_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_69_minipascal[5] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_69_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_69_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_69_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_69_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_69_4_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_69_minipascal[5] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_70_minipascal[7] = {
{NULL, {d_scanner_70_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_70_1_minipascal, {d_scanner_70_1_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_70_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_70_3_minipascal, {d_scanner_70_3_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_70_4_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_70_5_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_70_6_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_70_minipascal[7] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_70_1_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_70_3_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_71_minipascal[13] = {
{NULL, {d_scanner_71_0_0_minipascal, d_scanner_71_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_71_1_0_minipascal, d_scanner_71_1_1_minipascal
 , d_scanner_71_1_1_minipascal, d_scanner_71_1_1_minipascal}},
{d_shift_34_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_7_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_1_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_71_5_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_71_6_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_71_7_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_71_8_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_71_9_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_71_10_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_71_11_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_71_12_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_71_minipascal[13] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_71_5_1_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_74_minipascal[3] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_74_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_74_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_74_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_74_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_75_minipascal[5] = {
{NULL, {d_scanner_4_0_0_minipascal, d_scanner_20_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_4_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_75_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_75_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_75_4_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_75_minipascal[5] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_81_minipascal[2] = {
{NULL, {d_scanner_7_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_7_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_81_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_114_minipascal[2] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_114_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_114_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_114_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_118_minipascal[3] = {
{NULL, {d_scanner_9_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_118_1_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_118_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_118_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_119_minipascal[3] = {
{NULL, {d_scanner_119_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_119_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_23_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_119_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_121_minipascal[5] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_121_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_121_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_121_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_121_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_121_4_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_121_minipascal[5] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_123_minipascal[2] = {
{NULL, {d_scanner_123_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_119_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_123_minipascal[2] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_125_minipascal[5] = {
{NULL, {d_scanner_36_0_0_minipascal, d_scanner_0_2_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_36_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_36_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_32_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_125_4_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_125_minipascal[5] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_126_minipascal[8] = {
{NULL, {d_scanner_126_0_0_minipascal, d_scanner_126_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_126_1_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_69_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_126_3_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_21_5_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_126_5_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_126_6_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_126_7_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_126_minipascal[8] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

SB_uint8 d_scanner_131_minipascal[3] = {
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_131_0_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{NULL, {d_scanner_0_0_0_minipascal, d_scanner_131_1_1_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}},
{d_shift_131_2_minipascal, {d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal
 , d_scanner_0_0_0_minipascal, d_scanner_0_0_0_minipascal}}
};

SB_trans_uint8 d_transition_131_minipascal[3] = {
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}},
{{d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal
 , d_accepts_diff_0_0_0_minipascal, d_accepts_diff_0_0_0_minipascal}}
};

unsigned char d_goto_valid_0_minipascal[] = {
0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_1_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
D_Reduction * d_reductions_3_minipascal[] = {&d_reduction_107_minipascal};
unsigned char d_goto_valid_4_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_5_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_5_minipascal[] = {&d_reduction_99_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_5_minipascal[] = {{0, 7, &d_reduction_97_minipascal}};
unsigned char d_goto_valid_6_minipascal[] = {
0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_6_minipascal[] = {&d_reduction_5_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_6_minipascal[] = {{0, 11, &d_reduction_3_minipascal}};
unsigned char d_goto_valid_7_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x31,0x0,0x0,0x0,0x0,0x0,0x0,0xc0};
D_Reduction * d_reductions_7_minipascal[] = {&d_reduction_97_minipascal};
unsigned char d_goto_valid_8_minipascal[] = {
0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x40,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
unsigned char d_goto_valid_9_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_10_minipascal[] = {
0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_10_minipascal[] = {&d_reduction_23_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_10_minipascal[] = {{0, 21, &d_reduction_21_minipascal}};
D_Reduction * d_reductions_11_minipascal[] = {&d_reduction_3_minipascal};
D_Reduction * d_reductions_12_minipascal[] = {&d_reduction_4_minipascal};
D_Reduction * d_reductions_13_minipascal[] = {&d_reduction_108_minipascal};
D_Reduction * d_reductions_14_minipascal[] = {&d_reduction_98_minipascal};
D_Reduction * d_reductions_15_minipascal[] = {&d_reduction_100_minipascal};
D_Reduction * d_reductions_16_minipascal[] = {&d_reduction_100_minipascal};
unsigned char d_goto_valid_17_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_18_minipascal[] = {
0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_18_minipascal[] = {&d_reduction_13_minipascal};
D_Reduction * d_reductions_19_minipascal[] = {&d_reduction_1_minipascal};
unsigned char d_goto_valid_20_minipascal[] = {
0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_21_minipascal[] = {
0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_21_minipascal[] = {&d_reduction_21_minipascal};
unsigned char d_goto_valid_22_minipascal[] = {
0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_22_minipascal[] = {&d_reduction_10_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_22_minipascal[] = {{1, 57, &d_reduction_6_minipascal}};
unsigned char d_goto_valid_23_minipascal[] = {
0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_24_minipascal[] = {
0x0,0x0,0x40,0x7e,0xc4,0x1,0x80,0x4f,0x10,0x0,0x40,0x44,0x84,0x0,0x0,0x40};
D_Reduction * d_reductions_25_minipascal[] = {&d_reduction_2_minipascal};
D_Reduction * d_reductions_26_minipascal[] = {&d_reduction_26_minipascal};
unsigned char d_goto_valid_27_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
D_Reduction * d_reductions_28_minipascal[] = {&d_reduction_22_minipascal};
unsigned char d_goto_valid_29_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_30_minipascal[] = {
0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_30_minipascal[] = {&d_reduction_8_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_30_minipascal[] = {{0, 57, &d_reduction_6_minipascal}};
unsigned char d_goto_valid_31_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
unsigned char d_goto_valid_32_minipascal[] = {
0x0,0xb0,0x1,0x0,0x0,0x0,0x0,0x40,0x10,0x40,0x0,0x0,0x0,0x0,0x0,0x40};
D_Reduction * d_reductions_33_minipascal[] = {&d_reduction_12_minipascal};
unsigned char d_goto_valid_34_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_35_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_36_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x6,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_36_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_36_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
unsigned char d_goto_valid_37_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x6,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_37_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_37_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
D_Reduction * d_reductions_38_minipascal[] = {&d_reduction_50_minipascal};
unsigned char d_goto_valid_39_minipascal[] = {
0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_39_minipascal[] = {&d_reduction_29_minipascal};
D_Reduction * d_reductions_40_minipascal[] = {&d_reduction_31_minipascal};
D_Reduction * d_reductions_41_minipascal[] = {&d_reduction_33_minipascal};
D_Reduction * d_reductions_42_minipascal[] = {&d_reduction_34_minipascal};
D_Reduction * d_reductions_43_minipascal[] = {&d_reduction_38_minipascal};
D_Reduction * d_reductions_44_minipascal[] = {&d_reduction_35_minipascal};
D_Reduction * d_reductions_45_minipascal[] = {&d_reduction_36_minipascal};
D_Reduction * d_reductions_46_minipascal[] = {&d_reduction_32_minipascal};
D_Reduction * d_reductions_47_minipascal[] = {&d_reduction_51_minipascal};
D_Reduction * d_reductions_48_minipascal[] = {&d_reduction_52_minipascal};
unsigned char d_goto_valid_49_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_50_minipascal[] = {&d_reduction_88_minipascal};
unsigned char d_goto_valid_51_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_52_minipascal[] = {&d_reduction_87_minipascal,&d_reduction_90_minipascal};
D_Reduction * d_reductions_53_minipascal[] = {&d_reduction_91_minipascal};
D_Reduction * d_reductions_54_minipascal[] = {&d_reduction_39_minipascal,&d_reduction_92_minipascal};
unsigned char d_goto_valid_55_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_56_minipascal[] = {&d_reduction_24_minipascal};
unsigned char d_goto_valid_57_minipascal[] = {
0x80,0x2,0x0,0x0,0x0,0x0,0x0,0x40,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
D_Reduction * d_reductions_57_minipascal[] = {&d_reduction_6_minipascal};
D_Reduction * d_reductions_58_minipascal[] = {&d_reduction_14_minipascal};
unsigned char d_goto_valid_59_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_60_minipascal[] = {&d_reduction_11_minipascal};
D_Reduction * d_reductions_61_minipascal[] = {&d_reduction_16_minipascal};
D_Reduction * d_reductions_62_minipascal[] = {&d_reduction_15_minipascal};
D_Reduction * d_reductions_63_minipascal[] = {&d_reduction_19_minipascal};
D_Reduction * d_reductions_64_minipascal[] = {&d_reduction_20_minipascal};
unsigned char d_goto_valid_65_minipascal[] = {
0x0,0x0,0x0,0x0,0x2,0x0,0x80,0x4f,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
unsigned char d_goto_valid_66_minipascal[] = {
0x0,0x0,0x0,0x0,0x20,0x6,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_66_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_66_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
D_Reduction * d_reductions_67_minipascal[] = {&d_reduction_79_minipascal};
D_Reduction * d_reductions_68_minipascal[] = {&d_reduction_80_minipascal};
unsigned char d_goto_valid_69_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0};
unsigned char d_goto_valid_70_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0xf0,0x3,0x0};
D_Reduction * d_reductions_70_minipascal[] = {&d_reduction_56_minipascal};
unsigned char d_goto_valid_71_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x20,0x81,0x7f,0x3e,0x0,0x0,0x8,0x0,0x8,0x0,0xf0};
D_Reduction * d_reductions_72_minipascal[] = {&d_reduction_76_minipascal};
D_Reduction * d_reductions_73_minipascal[] = {&d_reduction_77_minipascal};
unsigned char d_goto_valid_74_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0};
unsigned char d_goto_valid_75_minipascal[] = {
0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x1,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_76_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x6,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_76_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_76_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
unsigned char d_goto_valid_77_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x6,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_77_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_77_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
unsigned char d_goto_valid_78_minipascal[] = {
0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_78_minipascal[] = {&d_reduction_5_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_78_minipascal[] = {{0, 11, &d_reduction_3_minipascal}};
D_Reduction * d_reductions_79_minipascal[] = {&d_reduction_7_minipascal};
unsigned char d_goto_valid_80_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_81_minipascal[] = {
0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x26,0x0,0x0,0x0,0x0,0x0,0x0,0x80};
unsigned char d_goto_valid_82_minipascal[] = {
0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_82_minipascal[] = {&d_reduction_42_minipascal};
D_Reduction * d_reductions_83_minipascal[] = {&d_reduction_44_minipascal};
D_Reduction * d_reductions_84_minipascal[] = {&d_reduction_92_minipascal};
unsigned char d_goto_valid_85_minipascal[] = {
0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_85_minipascal[] = {&d_reduction_47_minipascal};
D_Reduction * d_reductions_86_minipascal[] = {&d_reduction_49_minipascal};
unsigned char d_goto_valid_87_minipascal[] = {
0x0,0x0,0x40,0x7e,0xc4,0x1,0x80,0x4f,0x10,0x0,0x40,0x44,0x84,0x0,0x0,0x40};
D_Reduction * d_reductions_88_minipascal[] = {&d_reduction_70_minipascal};
D_Reduction * d_reductions_89_minipascal[] = {&d_reduction_71_minipascal};
D_Reduction * d_reductions_90_minipascal[] = {&d_reduction_72_minipascal};
D_Reduction * d_reductions_91_minipascal[] = {&d_reduction_73_minipascal};
D_Reduction * d_reductions_92_minipascal[] = {&d_reduction_74_minipascal};
D_Reduction * d_reductions_93_minipascal[] = {&d_reduction_75_minipascal};
unsigned char d_goto_valid_94_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x4,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_94_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_94_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
unsigned char d_goto_valid_95_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x6,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_95_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_95_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
unsigned char d_goto_valid_96_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x81,0x7f,0x3e,0x0,0x0,0x8,0x0,0x8,0x0,0xf0};
D_Reduction * d_reductions_97_minipascal[] = {&d_reduction_105_minipascal};
D_Reduction * d_reductions_98_minipascal[] = {&d_reduction_106_minipascal};
unsigned char d_goto_valid_99_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_99_minipascal[] = {&d_reduction_60_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_99_minipascal[] = {{0, 125, &d_reduction_58_minipascal}};
unsigned char d_goto_valid_100_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_100_minipascal[] = {&d_reduction_64_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_100_minipascal[] = {{0, 126, &d_reduction_62_minipascal}};
D_Reduction * d_reductions_101_minipascal[] = {&d_reduction_66_minipascal};
D_Reduction * d_reductions_102_minipascal[] = {&d_reduction_67_minipascal};
D_Reduction * d_reductions_103_minipascal[] = {&d_reduction_95_minipascal};
D_Reduction * d_reductions_104_minipascal[] = {&d_reduction_92_minipascal,&d_reduction_96_minipascal};
D_Reduction * d_reductions_105_minipascal[] = {&d_reduction_93_minipascal};
unsigned char d_goto_valid_106_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x80};
D_Reduction * d_reductions_106_minipascal[] = {&d_reduction_102_minipascal};
D_Reduction * d_reductions_107_minipascal[] = {&d_reduction_94_minipascal};
D_Reduction * d_reductions_108_minipascal[] = {&d_reduction_104_minipascal};
unsigned char d_goto_valid_109_minipascal[] = {
0x0,0x0,0x40,0x7e,0xc4,0x1,0x80,0x4f,0x10,0x0,0x40,0x44,0x84,0x0,0x0,0x40};
unsigned char d_goto_valid_110_minipascal[] = {
0x0,0x0,0x40,0x7e,0xc4,0x1,0x80,0x4f,0x10,0x0,0x40,0x44,0x84,0x0,0x0,0x40};
D_Reduction * d_reductions_111_minipascal[] = {&d_reduction_27_minipascal};
D_Reduction * d_reductions_112_minipascal[] = {&d_reduction_28_minipascal};
D_Reduction * d_reductions_113_minipascal[] = {&d_reduction_37_minipascal};
unsigned char d_goto_valid_114_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_115_minipascal[] = {&d_reduction_25_minipascal};
D_Reduction * d_reductions_116_minipascal[] = {&d_reduction_9_minipascal};
unsigned char d_goto_valid_117_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_118_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_119_minipascal[] = {
0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x10,0x0,0x20,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_120_minipascal[] = {
0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x20,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_121_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0};
D_Reduction * d_reductions_121_minipascal[] = {&d_reduction_53_minipascal};
D_Reduction * d_reductions_122_minipascal[] = {&d_reduction_57_minipascal};
unsigned char d_goto_valid_123_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0};
D_Reduction * d_reductions_124_minipascal[] = {&d_reduction_69_minipascal};
unsigned char d_goto_valid_125_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x10,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4c,0x0};
D_Reduction * d_reductions_125_minipascal[] = {&d_reduction_58_minipascal};
unsigned char d_goto_valid_126_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x80,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x3};
D_Reduction * d_reductions_126_minipascal[] = {&d_reduction_62_minipascal};
D_Reduction * d_reductions_127_minipascal[] = {&d_reduction_103_minipascal};
D_Reduction * d_reductions_128_minipascal[] = {&d_reduction_55_minipascal};
D_Reduction * d_reductions_129_minipascal[] = {&d_reduction_30_minipascal};
D_Reduction * d_reductions_130_minipascal[] = {&d_reduction_89_minipascal};
unsigned char d_goto_valid_131_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0};
unsigned char d_goto_valid_132_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x26,0x0,0x0,0x0,0x0,0x0,0x0,0x80};
unsigned char d_goto_valid_133_minipascal[] = {
0x0,0x0,0x0,0x0,0x2,0x0,0x80,0x4f,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
D_Reduction * d_reductions_134_minipascal[] = {&d_reduction_40_minipascal};
D_Reduction * d_reductions_135_minipascal[] = {&d_reduction_41_minipascal};
unsigned char d_goto_valid_136_minipascal[] = {
0x0,0x0,0x0,0x0,0x20,0x6,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0};
D_Reduction * d_reductions_136_minipascal[] = {&d_reduction_78_minipascal};
D_RightEpsilonHint d_right_epsilon_hints_136_minipascal[] = {{0, 72, &d_reduction_76_minipascal}};
D_Reduction * d_reductions_137_minipascal[] = {&d_reduction_45_minipascal};
D_Reduction * d_reductions_138_minipascal[] = {&d_reduction_46_minipascal};
unsigned char d_goto_valid_139_minipascal[] = {
0x0,0x0,0x40,0x7e,0xc4,0x1,0x80,0x4f,0x10,0x0,0x40,0x44,0x84,0x0,0x0,0x40};
D_Reduction * d_reductions_140_minipascal[] = {&d_reduction_68_minipascal};
D_Reduction * d_reductions_141_minipascal[] = {&d_reduction_81_minipascal};
D_Reduction * d_reductions_142_minipascal[] = {&d_reduction_82_minipascal};
D_Reduction * d_reductions_143_minipascal[] = {&d_reduction_83_minipascal};
D_Reduction * d_reductions_144_minipascal[] = {&d_reduction_59_minipascal};
unsigned char d_goto_valid_145_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x20,0x81,0x7f,0x3e,0x0,0x0,0x8,0x0,0x8,0x0,0xf0};
D_Reduction * d_reductions_146_minipascal[] = {&d_reduction_84_minipascal};
D_Reduction * d_reductions_147_minipascal[] = {&d_reduction_85_minipascal};
D_Reduction * d_reductions_148_minipascal[] = {&d_reduction_86_minipascal};
D_Reduction * d_reductions_149_minipascal[] = {&d_reduction_63_minipascal};
unsigned char d_goto_valid_150_minipascal[] = {
0x0,0x0,0x0,0x0,0x0,0x0,0x81,0x7f,0x3e,0x0,0x0,0x8,0x0,0x8,0x0,0xf0};
unsigned char d_goto_valid_151_minipascal[] = {
0x0,0x80,0x1,0x0,0x0,0x0,0x0,0x40,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x40};
D_Reduction * d_reductions_152_minipascal[] = {&d_reduction_18_minipascal};
D_Reduction * d_reductions_153_minipascal[] = {&d_reduction_43_minipascal};
D_Reduction * d_reductions_154_minipascal[] = {&d_reduction_48_minipascal};
D_Reduction * d_reductions_155_minipascal[] = {&d_reduction_54_minipascal};
D_Reduction * d_reductions_156_minipascal[] = {&d_reduction_61_minipascal};
D_Reduction * d_reductions_157_minipascal[] = {&d_reduction_65_minipascal};
D_Reduction * d_reductions_158_minipascal[] = {&d_reduction_17_minipascal};
unsigned short d_gotos_minipascal[643] = {
3,5,7,8,18,20,23,6,10,11,12,13,15,21,22,24,
16,17,26,27,29,30,31,34,57,58,66,56,59,67,70,71,
76,6,6,77,75,71,78,72,73,74,79,82,88,72,73,74,
110,61,62,117,63,64,120,121,80,19,81,126,127,114,71,6,
128,4,131,113,132,2,72,73,74,133,4,14,136,140,141,9,
152,0,0,25,0,28,0,0,32,33,39,4,4,40,41,42,
43,44,45,65,0,0,46,68,69,6,47,48,49,68,69,19,
0,0,111,60,83,6,95,0,134,4,14,50,51,52,53,54,
0,0,55,112,139,118,68,69,6,135,84,51,52,53,54,0,
0,85,116,11,12,13,0,6,0,0,25,86,0,0,35,87,
71,0,36,4,145,0,37,150,72,73,74,38,137,146,151,4,
0,89,90,91,92,93,94,0,119,107,115,71,109,138,100,0,
0,101,4,72,73,74,0,0,102,51,52,53,54,103,104,105,
0,4,106,107,108,6,109,0,123,9,124,71,0,0,0,0,
72,73,74,72,73,74,0,0,68,69,142,143,96,0,144,147,
148,149,0,153,107,0,14,109,0,0,39,0,97,122,41,42,
43,44,45,68,69,0,46,0,159,64,47,48,49,98,99,4,
14,0,0,0,0,0,0,0,0,0,0,50,51,52,53,54,
68,69,55,68,69,0,0,155,6,0,0,87,71,0,0,0,
0,14,0,0,72,73,74,65,0,0,25,0,0,6,35,0,
0,0,36,0,0,125,37,0,0,0,0,38,102,51,52,53,
54,103,104,105,0,0,106,107,108,6,109,0,0,0,0,0,
0,39,4,0,129,41,42,43,44,45,0,0,0,46,0,0,
96,47,48,49,68,69,0,4,0,0,0,0,0,0,0,0,
97,0,50,51,52,53,54,0,0,55,0,0,0,0,0,6,
0,98,99,4,14,0,39,0,0,130,41,42,43,44,45,0,
0,25,46,0,0,35,47,48,49,36,0,0,0,37,0,0,
0,0,38,0,154,0,0,50,51,52,53,54,0,0,55,0,
0,0,0,0,6,0,0,0,0,4,84,51,52,53,54,0,
0,85,0,0,0,0,25,6,0,0,35,0,0,0,36,0,
0,0,37,0,0,39,0,38,156,41,42,43,44,45,0,0,
0,46,0,0,0,47,48,49,0,0,0,0,0,0,4,0,
0,0,0,0,0,0,50,51,52,53,54,157,0,55,101,0,
0,4,0,6,0,102,51,52,53,54,103,104,105,0,0,106,
107,108,6,109,0,25,0,0,0,35,0,0,0,36,0,0,
0,37,0,158,0,0,38,0,0,96,102,51,52,53,54,103,
104,105,0,0,106,107,108,6,109,97,0,0,0,4,0,0,
0,0,0,0,0,0,0,0,0,0,98,99,4,14,96,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,
99,4,14};

D_ErrorRecoveryHint d_error_recovery_hints_0_minipascal[] = {{0, 1, "."}};
D_ErrorRecoveryHint d_error_recovery_hints_1_minipascal[] = {{1, 1, "."}};
D_ErrorRecoveryHint d_error_recovery_hints_4_minipascal[] = {{2, 1, "."}};
D_ErrorRecoveryHint d_error_recovery_hints_6_minipascal[] = {{3, 1, "."}};
D_ErrorRecoveryHint d_error_recovery_hints_9_minipascal[] = {{4, 1, "."}};
D_ErrorRecoveryHint d_error_recovery_hints_19_minipascal[] = {{5, 1, "."}};
D_ErrorRecoveryHint d_error_recovery_hints_20_minipascal[] = {{0, 22, "end"}};
D_ErrorRecoveryHint d_error_recovery_hints_21_minipascal[] = {{0, 19, ";"}};
D_ErrorRecoveryHint d_error_recovery_hints_24_minipascal[] = {
{0, 22, "end"},
{0, 30, ")"},
{0, 56, "]"}};
D_ErrorRecoveryHint d_error_recovery_hints_29_minipascal[] = {{1, 19, ";"}};
D_ErrorRecoveryHint d_error_recovery_hints_34_minipascal[] = {{1, 30, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_35_minipascal[] = {{1, 34, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_39_minipascal[] = {{2, 22, "end"}};
D_ErrorRecoveryHint d_error_recovery_hints_51_minipascal[] = {{1, 56, "]"}};
D_ErrorRecoveryHint d_error_recovery_hints_56_minipascal[] = {{2, 19, ";"}};
D_ErrorRecoveryHint d_error_recovery_hints_57_minipascal[] = {{0, 7, ";"}};
D_ErrorRecoveryHint d_error_recovery_hints_65_minipascal[] = {
{0, 56, "]"},
{2, 30, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_66_minipascal[] = {{2, 34, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_71_minipascal[] = {
{0, 48, ")"},
{0, 56, "]"}};
D_ErrorRecoveryHint d_error_recovery_hints_75_minipascal[] = {{3, 22, "end"}};
D_ErrorRecoveryHint d_error_recovery_hints_77_minipascal[] = {{2, 56, "]"}};
D_ErrorRecoveryHint d_error_recovery_hints_80_minipascal[] = {{1, 7, ";"}};
D_ErrorRecoveryHint d_error_recovery_hints_82_minipascal[] = {{3, 30, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_85_minipascal[] = {{3, 34, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_95_minipascal[] = {{1, 48, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_111_minipascal[] = {{4, 22, "end"}};
D_ErrorRecoveryHint d_error_recovery_hints_114_minipascal[] = {{3, 56, "]"}};
D_ErrorRecoveryHint d_error_recovery_hints_116_minipascal[] = {{2, 7, ";"}};
D_ErrorRecoveryHint d_error_recovery_hints_119_minipascal[] = {{4, 30, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_120_minipascal[] = {{4, 34, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_123_minipascal[] = {{2, 48, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_130_minipascal[] = {{4, 56, "]"}};
D_ErrorRecoveryHint d_error_recovery_hints_133_minipascal[] = {{0, 56, "]"}};
D_ErrorRecoveryHint d_error_recovery_hints_134_minipascal[] = {{5, 30, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_137_minipascal[] = {{5, 34, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_140_minipascal[] = {{3, 48, ")"}};

D_State d_states_minipascal[] = {
{d_goto_valid_0_minipascal, 1, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_0_minipascal}, 1, NULL, (void*)d_scanner_0_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_0_minipascal, d_accepts_diff_0_minipascal, -1},
{d_goto_valid_1_minipascal, 61, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_1_minipascal}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{NULL, -2147483647, {0, NULL}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 1, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_3_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_4_minipascal, 69, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_4_minipascal}, 1, NULL, (void*)d_scanner_4_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_4_minipascal, d_accepts_diff_4_minipascal, -1},
{d_goto_valid_5_minipascal, 60, {1, d_reductions_5_minipascal}, {1, d_right_epsilon_hints_5_minipascal}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_6_minipascal, -6, {1, d_reductions_6_minipascal}, {1, d_right_epsilon_hints_6_minipascal}, {1, d_error_recovery_hints_6_minipascal}, 1, NULL, (void*)d_scanner_6_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_6_minipascal, d_accepts_diff_6_minipascal, -1},
{d_goto_valid_7_minipascal, 52, {1, d_reductions_7_minipascal}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_7_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_7_minipascal, d_accepts_diff_7_minipascal, -1},
{d_goto_valid_8_minipascal, 5, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{d_goto_valid_9_minipascal, 67, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_9_minipascal}, 1, NULL, (void*)d_scanner_9_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_9_minipascal, d_accepts_diff_9_minipascal, -1},
{d_goto_valid_10_minipascal, 4, {1, d_reductions_10_minipascal}, {1, d_right_epsilon_hints_10_minipascal}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_11_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_12_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_13_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_14_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_15_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_16_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_17_minipascal, 65, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_4_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_4_minipascal, d_accepts_diff_4_minipascal, -1},
{d_goto_valid_18_minipascal, -5, {1, d_reductions_18_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_19_minipascal}, {0, NULL}, {1, d_error_recovery_hints_19_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_20_minipascal, 3, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_20_minipascal}, 1, NULL, (void*)d_scanner_20_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_20_minipascal, d_accepts_diff_20_minipascal, -1},
{d_goto_valid_21_minipascal, -1, {1, d_reductions_21_minipascal}, {0, NULL}, {1, d_error_recovery_hints_21_minipascal}, 1, NULL, (void*)d_scanner_21_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_21_minipascal, d_accepts_diff_21_minipascal, -1},
{d_goto_valid_22_minipascal, -14, {1, d_reductions_22_minipascal}, {1, d_right_epsilon_hints_22_minipascal}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_23_minipascal, -12, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_23_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_23_minipascal, d_accepts_diff_23_minipascal, -1},
{d_goto_valid_24_minipascal, -68, {0, NULL}, {0, NULL}, {3, d_error_recovery_hints_24_minipascal}, 1, NULL, (void*)d_scanner_24_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_24_minipascal, d_accepts_diff_24_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_25_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_26_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_27_minipascal, 35, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_28_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_29_minipascal, 47, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_29_minipascal}, 1, NULL, (void*)d_scanner_4_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_4_minipascal, d_accepts_diff_4_minipascal, -1},
{d_goto_valid_30_minipascal, -19, {1, d_reductions_30_minipascal}, {1, d_right_epsilon_hints_30_minipascal}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_31_minipascal, 34, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{d_goto_valid_32_minipascal, -37, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_32_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_32_minipascal, d_accepts_diff_32_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_33_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_34_minipascal, 65, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_34_minipascal}, 1, NULL, (void*)d_scanner_34_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_34_minipascal, d_accepts_diff_34_minipascal, -1},
{d_goto_valid_35_minipascal, 62, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_35_minipascal}, 1, NULL, (void*)d_scanner_34_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_34_minipascal, d_accepts_diff_34_minipascal, -1},
{d_goto_valid_36_minipascal, 11, {1, d_reductions_36_minipascal}, {1, d_right_epsilon_hints_36_minipascal}, {0, NULL}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{d_goto_valid_37_minipascal, 5, {1, d_reductions_37_minipascal}, {1, d_right_epsilon_hints_37_minipascal}, {0, NULL}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_38_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_39_minipascal, -9, {1, d_reductions_39_minipascal}, {0, NULL}, {1, d_error_recovery_hints_39_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_40_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_41_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_42_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_43_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_44_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_45_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_46_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_47_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_48_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_49_minipascal, 54, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_49_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_49_minipascal, d_accepts_diff_49_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_50_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_51_minipascal, 41, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_51_minipascal}, 1, NULL, (void*)d_scanner_51_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_51_minipascal, d_accepts_diff_51_minipascal, -1},
{NULL, -2147483647, {2, d_reductions_52_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_53_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {2, d_reductions_54_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_55_minipascal, 29, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_4_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_4_minipascal, d_accepts_diff_4_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_56_minipascal}, {0, NULL}, {1, d_error_recovery_hints_56_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_57_minipascal, -49, {1, d_reductions_57_minipascal}, {0, NULL}, {1, d_error_recovery_hints_57_minipascal}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_58_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_59_minipascal, 36, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_51_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_51_minipascal, d_accepts_diff_51_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_60_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_61_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_62_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_63_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_64_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_65_minipascal, -83, {0, NULL}, {0, NULL}, {2, d_error_recovery_hints_65_minipascal}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{d_goto_valid_66_minipascal, -118, {1, d_reductions_66_minipascal}, {1, d_right_epsilon_hints_66_minipascal}, {1, d_error_recovery_hints_66_minipascal}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_67_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_68_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_69_minipascal, 55, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_69_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_69_minipascal, d_accepts_diff_69_minipascal, -1},
{d_goto_valid_70_minipascal, -69, {1, d_reductions_70_minipascal}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_70_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_70_minipascal, d_accepts_diff_70_minipascal, -1},
{d_goto_valid_71_minipascal, -145, {0, NULL}, {0, NULL}, {2, d_error_recovery_hints_71_minipascal}, 1, NULL, (void*)d_scanner_71_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_71_minipascal, d_accepts_diff_71_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_72_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_73_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_74_minipascal, 56, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_74_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_74_minipascal, d_accepts_diff_74_minipascal, -1},
{d_goto_valid_75_minipascal, -43, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_75_minipascal}, 1, NULL, (void*)d_scanner_75_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_75_minipascal, d_accepts_diff_75_minipascal, -1},
{d_goto_valid_76_minipascal, -20, {1, d_reductions_76_minipascal}, {1, d_right_epsilon_hints_76_minipascal}, {0, NULL}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{d_goto_valid_77_minipascal, -145, {1, d_reductions_77_minipascal}, {1, d_right_epsilon_hints_77_minipascal}, {1, d_error_recovery_hints_77_minipascal}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{d_goto_valid_78_minipascal, -144, {1, d_reductions_78_minipascal}, {1, d_right_epsilon_hints_78_minipascal}, {0, NULL}, 1, NULL, (void*)d_scanner_6_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_6_minipascal, d_accepts_diff_6_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_79_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_80_minipascal, 20, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_80_minipascal}, 1, NULL, (void*)d_scanner_4_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_4_minipascal, d_accepts_diff_4_minipascal, -1},
{d_goto_valid_81_minipascal, -119, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_81_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_81_minipascal, d_accepts_diff_81_minipascal, -1},
{d_goto_valid_82_minipascal, -23, {1, d_reductions_82_minipascal}, {0, NULL}, {1, d_error_recovery_hints_82_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_83_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_84_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_85_minipascal, -20, {1, d_reductions_85_minipascal}, {0, NULL}, {1, d_error_recovery_hints_85_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_86_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_87_minipascal, -228, {0, NULL}, {0, NULL}, {3, d_error_recovery_hints_24_minipascal}, 1, NULL, (void*)d_scanner_24_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_24_minipascal, d_accepts_diff_24_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_88_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_89_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_90_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_91_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_92_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_93_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_94_minipascal, -174, {1, d_reductions_94_minipascal}, {1, d_right_epsilon_hints_94_minipascal}, {0, NULL}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{d_goto_valid_95_minipascal, -177, {1, d_reductions_95_minipascal}, {1, d_right_epsilon_hints_95_minipascal}, {1, d_error_recovery_hints_95_minipascal}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{d_goto_valid_96_minipascal, -277, {0, NULL}, {0, NULL}, {2, d_error_recovery_hints_71_minipascal}, 1, NULL, (void*)d_scanner_71_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_71_minipascal, d_accepts_diff_71_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_97_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_98_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_99_minipascal, -16, {1, d_reductions_99_minipascal}, {1, d_right_epsilon_hints_99_minipascal}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_100_minipascal, -14, {1, d_reductions_100_minipascal}, {1, d_right_epsilon_hints_100_minipascal}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_101_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_102_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_103_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {2, d_reductions_104_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_105_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_106_minipascal, 5, {1, d_reductions_106_minipascal}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_81_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_81_minipascal, d_accepts_diff_81_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_107_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_108_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_109_minipascal, -331, {0, NULL}, {0, NULL}, {3, d_error_recovery_hints_24_minipascal}, 1, NULL, (void*)d_scanner_24_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_24_minipascal, d_accepts_diff_24_minipascal, -1},
{d_goto_valid_110_minipascal, -384, {0, NULL}, {0, NULL}, {3, d_error_recovery_hints_24_minipascal}, 1, NULL, (void*)d_scanner_24_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_24_minipascal, d_accepts_diff_24_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_111_minipascal}, {0, NULL}, {1, d_error_recovery_hints_111_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_112_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_113_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_114_minipascal, 14, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_114_minipascal}, 1, NULL, (void*)d_scanner_114_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_114_minipascal, d_accepts_diff_114_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_115_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_116_minipascal}, {0, NULL}, {1, d_error_recovery_hints_116_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_117_minipascal, 12, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_114_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_114_minipascal, d_accepts_diff_114_minipascal, -1},
{d_goto_valid_118_minipascal, 9, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_118_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_118_minipascal, d_accepts_diff_118_minipascal, -1},
{d_goto_valid_119_minipascal, -44, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_119_minipascal}, 1, NULL, (void*)d_scanner_119_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_119_minipascal, d_accepts_diff_119_minipascal, -1},
{d_goto_valid_120_minipascal, -96, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_120_minipascal}, 1, NULL, (void*)d_scanner_119_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_119_minipascal, d_accepts_diff_119_minipascal, -1},
{d_goto_valid_121_minipascal, 25, {1, d_reductions_121_minipascal}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_121_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_121_minipascal, d_accepts_diff_121_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_122_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_123_minipascal, 15, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_123_minipascal}, 1, NULL, (void*)d_scanner_123_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_123_minipascal, d_accepts_diff_123_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_124_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_125_minipascal, -120, {1, d_reductions_125_minipascal}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_125_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_125_minipascal, d_accepts_diff_125_minipascal, -1},
{d_goto_valid_126_minipascal, -120, {1, d_reductions_126_minipascal}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_126_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_126_minipascal, d_accepts_diff_126_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_127_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_128_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_129_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_130_minipascal}, {0, NULL}, {1, d_error_recovery_hints_130_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_131_minipascal, 1, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_131_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_131_minipascal, d_accepts_diff_131_minipascal, -1},
{d_goto_valid_132_minipascal, -178, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_81_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_81_minipascal, d_accepts_diff_81_minipascal, -1},
{d_goto_valid_133_minipascal, -403, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_133_minipascal}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_134_minipascal}, {0, NULL}, {1, d_error_recovery_hints_134_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_135_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_136_minipascal, -258, {1, d_reductions_136_minipascal}, {1, d_right_epsilon_hints_136_minipascal}, {0, NULL}, 1, NULL, (void*)d_scanner_36_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_36_minipascal, d_accepts_diff_36_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_137_minipascal}, {0, NULL}, {1, d_error_recovery_hints_137_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_138_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_139_minipascal, -463, {0, NULL}, {0, NULL}, {3, d_error_recovery_hints_24_minipascal}, 1, NULL, (void*)d_scanner_24_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_24_minipascal, d_accepts_diff_24_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_140_minipascal}, {0, NULL}, {1, d_error_recovery_hints_140_minipascal}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_141_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_142_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_143_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_144_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_145_minipascal, -478, {0, NULL}, {0, NULL}, {2, d_error_recovery_hints_71_minipascal}, 1, NULL, (void*)d_scanner_71_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_71_minipascal, d_accepts_diff_71_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_146_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_147_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_148_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_149_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_150_minipascal, -515, {0, NULL}, {0, NULL}, {2, d_error_recovery_hints_71_minipascal}, 1, NULL, (void*)d_scanner_71_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_71_minipascal, d_accepts_diff_71_minipascal, -1},
{d_goto_valid_151_minipascal, -249, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_1_minipascal, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_minipascal, d_accepts_diff_1_minipascal, -1},
{NULL, -2147483647, {1, d_reductions_152_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_153_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_154_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_155_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_156_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_157_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_158_minipascal}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1}
};

D_Symbol d_symbols_minipascal[] = {
{D_SYMBOL_EBNF, "0 Start", 7, -1},
{D_SYMBOL_NTERM, "program", 7, -1},
{D_SYMBOL_NTERM, "block", 5, -1},
{D_SYMBOL_NTERM, "variable_declaration_part", 25, -1},
{D_SYMBOL_INTERNAL, "variable_declaration_part__8", 28, -1},
{D_SYMBOL_EBNF, "variable_declaration_part__4", 28, -1},
{D_SYMBOL_INTERNAL, "variable_declaration_part__4__7", 31, -1},
{D_SYMBOL_EBNF, "variable_declaration_part__4__6", 31, -1},
{D_SYMBOL_EBNF, " _synthetic__5", 14, -1},
{D_SYMBOL_NTERM, "variable_declaration", 20, -1},
{D_SYMBOL_INTERNAL, "variable_declaration__11", 24, -1},
{D_SYMBOL_EBNF, "variable_declaration__10", 24, -1},
{D_SYMBOL_NTERM, "type", 4, -1},
{D_SYMBOL_NTERM, "array_type", 10, -1},
{D_SYMBOL_NTERM, "index_range", 11, -1},
{D_SYMBOL_NTERM, "simple_type", 11, -1},
{D_SYMBOL_NTERM, "type_identifier", 15, -1},
{D_SYMBOL_NTERM, "procedure_declaration_part", 26, -1},
{D_SYMBOL_INTERNAL, "procedure_declaration_part__19", 30, -1},
{D_SYMBOL_EBNF, "procedure_declaration_part__18", 30, -1},
{D_SYMBOL_NTERM, "procedure_declaration", 21, -1},
{D_SYMBOL_NTERM, "statement_part", 14, -1},
{D_SYMBOL_NTERM, "compound_statement", 18, -1},
{D_SYMBOL_INTERNAL, "compound_statement__24", 22, -1},
{D_SYMBOL_EBNF, "compound_statement__23", 22, -1},
{D_SYMBOL_NTERM, "statement", 9, -1},
{D_SYMBOL_NTERM, "simple_statement", 16, -1},
{D_SYMBOL_NTERM, "assignment_statement", 20, -1},
{D_SYMBOL_NTERM, "procedure_statement", 19, -1},
{D_SYMBOL_NTERM, "procedure_identifier", 20, -1},
{D_SYMBOL_NTERM, "read_statement", 14, -1},
{D_SYMBOL_INTERNAL, "read_statement__32", 18, -1},
{D_SYMBOL_EBNF, "read_statement__31", 18, -1},
{D_SYMBOL_NTERM, "input_variable", 14, -1},
{D_SYMBOL_NTERM, "write_statement", 15, -1},
{D_SYMBOL_INTERNAL, "write_statement__36", 19, -1},
{D_SYMBOL_EBNF, "write_statement__35", 19, -1},
{D_SYMBOL_NTERM, "output_value", 12, -1},
{D_SYMBOL_NTERM, "structured_statement", 20, -1},
{D_SYMBOL_NTERM, "if_statement", 12, -1},
{D_SYMBOL_NTERM, "while_statement", 15, -1},
{D_SYMBOL_NTERM, "expression", 10, -1},
{D_SYMBOL_NTERM, "simple_expression", 17, -1},
{D_SYMBOL_INTERNAL, "simple_expression__44", 21, -1},
{D_SYMBOL_EBNF, "simple_expression__43", 21, -1},
{D_SYMBOL_NTERM, "term", 4, -1},
{D_SYMBOL_INTERNAL, "term__47", 8, -1},
{D_SYMBOL_EBNF, "term__46", 8, -1},
{D_SYMBOL_NTERM, "factor", 6, -1},
{D_SYMBOL_NTERM, "relational_operator", 19, -1},
{D_SYMBOL_NTERM, "sign", 4, -1},
{D_SYMBOL_INTERNAL, "sign__52", 8, -1},
{D_SYMBOL_EBNF, "sign__51", 8, -1},
{D_SYMBOL_NTERM, "adding_operator", 15, -1},
{D_SYMBOL_NTERM, "multiplying_operator", 20, -1},
{D_SYMBOL_NTERM, "variable", 8, -1},
{D_SYMBOL_NTERM, "indexed_variable", 16, -1},
{D_SYMBOL_NTERM, "array_variable", 14, -1},
{D_SYMBOL_NTERM, "entire_variable", 15, -1},
{D_SYMBOL_NTERM, "variable_identifier", 19, -1},
{D_SYMBOL_NTERM, "constant", 8, -1},
{D_SYMBOL_NTERM, "constant_identifier", 19, -1},
{D_SYMBOL_NTERM, "identifier", 10, -1},
{D_SYMBOL_INTERNAL, "identifier__64", 14, -1},
{D_SYMBOL_EBNF, "identifier__63", 14, -1},
{D_SYMBOL_NTERM, "integer_constant", 16, -1},
{D_SYMBOL_INTERNAL, "integer_constant__66", 20, -1},
{D_SYMBOL_NTERM, "character_constant", 18, -1},
{D_SYMBOL_NTERM, "letter", 6, -1},
{D_SYMBOL_NTERM, "digit", 5, -1},
{D_SYMBOL_STRING, "program", 7, -1},
{D_SYMBOL_STRING, ";", 1, -1},
{D_SYMBOL_STRING, ".", 1, -1},
{D_SYMBOL_STRING, "var", 3, -1},
{D_SYMBOL_STRING, ";", 1, -1},
{D_SYMBOL_STRING, ";", 1, -1},
{D_SYMBOL_STRING, ",", 1, -1},
{D_SYMBOL_STRING, ":", 1, -1},
{D_SYMBOL_STRING, "array", 5, -1},
{D_SYMBOL_STRING, "[", 1, -1},
{D_SYMBOL_STRING, "]", 1, -1},
{D_SYMBOL_STRING, "of", 2, -1},
{D_SYMBOL_STRING, "..", 2, -1},
{D_SYMBOL_STRING, ";", 1, -1},
{D_SYMBOL_STRING, "procedure", 9, -1},
{D_SYMBOL_STRING, ";", 1, -1},
{D_SYMBOL_STRING, "begin", 5, -1},
{D_SYMBOL_STRING, ";", 1, -1},
{D_SYMBOL_STRING, "end", 3, -1},
{D_SYMBOL_STRING, ":=", 2, -1},
{D_SYMBOL_STRING, "read", 4, -1},
{D_SYMBOL_STRING, "(", 1, -1},
{D_SYMBOL_STRING, ",", 1, -1},
{D_SYMBOL_STRING, ")", 1, -1},
{D_SYMBOL_STRING, "write", 5, -1},
{D_SYMBOL_STRING, "(", 1, -1},
{D_SYMBOL_STRING, ",", 1, -1},
{D_SYMBOL_STRING, ")", 1, -1},
{D_SYMBOL_STRING, "if", 2, -1},
{D_SYMBOL_STRING, "then", 4, -1},
{D_SYMBOL_STRING, "if", 2, -1},
{D_SYMBOL_STRING, "then", 4, -1},
{D_SYMBOL_STRING, "else", 4, -1},
{D_SYMBOL_STRING, "while", 5, -1},
{D_SYMBOL_STRING, "do", 2, -1},
{D_SYMBOL_STRING, "(", 1, -1},
{D_SYMBOL_STRING, ")", 1, -1},
{D_SYMBOL_STRING, "not", 3, -1},
{D_SYMBOL_STRING, "=", 1, -1},
{D_SYMBOL_STRING, "<>", 2, -1},
{D_SYMBOL_STRING, "<", 1, -1},
{D_SYMBOL_STRING, "<=", 2, -1},
{D_SYMBOL_STRING, ">=", 2, -1},
{D_SYMBOL_STRING, ">", 1, -1},
{D_SYMBOL_STRING, "+", 1, -1},
{D_SYMBOL_STRING, "-", 1, -1},
{D_SYMBOL_STRING, "+", 1, -1},
{D_SYMBOL_STRING, "-", 1, -1},
{D_SYMBOL_STRING, "or", 2, -1},
{D_SYMBOL_STRING, "*", 1, -1},
{D_SYMBOL_STRING, "div", 3, -1},
{D_SYMBOL_STRING, "and", 3, -1},
{D_SYMBOL_STRING, "[", 1, -1},
{D_SYMBOL_STRING, "]", 1, -1},
{D_SYMBOL_REGEX, "'[^']'", 6, -1},
{D_SYMBOL_STRING, "''''", 4, -1},
{D_SYMBOL_REGEX, "[a-zA-Z]", 8, -1},
{D_SYMBOL_REGEX, "[0-9]", 5, -1},
};

D_ParserTables parser_tables_minipascal = {
159, d_states_minipascal, d_gotos_minipascal, 0, 128, d_symbols_minipascal, NULL, 0, NULL, 1};
